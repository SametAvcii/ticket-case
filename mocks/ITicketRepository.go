// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	models "samet-avci/gowit/models/ticket"

	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"

	repository "samet-avci/gowit/internal/repository/ticket"
)

// ITicketRepository is an autogenerated mock type for the ITicketRepository type
type ITicketRepository struct {
	mock.Mock
}

// Commit provides a mock function with given fields: db
func (_m *ITicketRepository) Commit(db *gorm.DB) {
	_m.Called(db)
}

// CreateTicket provides a mock function with given fields: ticket
func (_m *ITicketRepository) CreateTicket(ticket *models.Ticket) error {
	ret := _m.Called(ticket)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Ticket) error); ok {
		r0 = rf(ticket)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTicket provides a mock function with given fields: id
func (_m *ITicketRepository) GetTicket(id int) (models.Ticket, error) {
	ret := _m.Called(id)

	var r0 models.Ticket
	if rf, ok := ret.Get(0).(func(int) models.Ticket); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.Ticket)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsDuplicate provides a mock function with given fields: name
func (_m *ITicketRepository) IsDuplicate(name string) bool {
	ret := _m.Called(name)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Rollback provides a mock function with given fields: db
func (_m *ITicketRepository) Rollback(db *gorm.DB) {
	_m.Called(db)
}

// SaveSoldTicket provides a mock function with given fields: soldTicket
func (_m *ITicketRepository) SaveSoldTicket(soldTicket models.SoldTicket) error {
	ret := _m.Called(soldTicket)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.SoldTicket) error); ok {
		r0 = rf(soldTicket)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SellTicket provides a mock function with given fields: quantity, ID
func (_m *ITicketRepository) SellTicket(quantity int, ID int) error {
	ret := _m.Called(quantity, ID)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(quantity, ID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TxBegin provides a mock function with given fields:
func (_m *ITicketRepository) TxBegin() *gorm.DB {
	ret := _m.Called()

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func() *gorm.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// WithTrx provides a mock function with given fields: _a0
func (_m *ITicketRepository) WithTrx(_a0 *gorm.DB) *repository.TicketRepository {
	ret := _m.Called(_a0)

	var r0 *repository.TicketRepository
	if rf, ok := ret.Get(0).(func(*gorm.DB) *repository.TicketRepository); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.TicketRepository)
		}
	}

	return r0
}

type mockConstructorTestingTNewITicketRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewITicketRepository creates a new instance of ITicketRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewITicketRepository(t mockConstructorTestingTNewITicketRepository) *ITicketRepository {
	mock := &ITicketRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
