// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	request "samet-avci/gowit/dto/request"

	mock "github.com/stretchr/testify/mock"

	response "samet-avci/gowit/dto/response"
)

// ITicketService is an autogenerated mock type for the ITicketService type
type ITicketService struct {
	mock.Mock
}

// CreateTicketOption provides a mock function with given fields: ctx, _a1
func (_m *ITicketService) CreateTicketOption(ctx context.Context, _a1 request.NewTicketDTO) (response.NewTicketDTO, error) {
	ret := _m.Called(ctx, _a1)

	var r0 response.NewTicketDTO
	if rf, ok := ret.Get(0).(func(context.Context, request.NewTicketDTO) response.NewTicketDTO); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(response.NewTicketDTO)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, request.NewTicketDTO) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTicket provides a mock function with given fields: ctx, id
func (_m *ITicketService) GetTicket(ctx context.Context, id string) (response.GetTicketDTO, error) {
	ret := _m.Called(ctx, id)

	var r0 response.GetTicketDTO
	if rf, ok := ret.Get(0).(func(context.Context, string) response.GetTicketDTO); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(response.GetTicketDTO)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PurchaseFromTicketOption provides a mock function with given fields: ctx, id, _a2
func (_m *ITicketService) PurchaseFromTicketOption(ctx context.Context, id string, _a2 request.PurchaseFromTicketOptionsDTO) error {
	ret := _m.Called(ctx, id, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, request.PurchaseFromTicketOptionsDTO) error); ok {
		r0 = rf(ctx, id, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewITicketService interface {
	mock.TestingT
	Cleanup(func())
}

// NewITicketService creates a new instance of ITicketService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewITicketService(t mockConstructorTestingTNewITicketService) *ITicketService {
	mock := &ITicketService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
