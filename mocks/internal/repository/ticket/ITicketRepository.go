// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	models "samet-avci/gowit/models/ticket"

	mock "github.com/stretchr/testify/mock"
)

// ITicketRepository is an autogenerated mock type for the ITicketRepository type
type ITicketRepository struct {
	mock.Mock
}

// CreateTicket provides a mock function with given fields: ctx, ticket
func (_m *ITicketRepository) CreateTicket(ctx context.Context, ticket *models.Ticket) error {
	ret := _m.Called(ctx, ticket)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Ticket) error); ok {
		r0 = rf(ctx, ticket)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTicket provides a mock function with given fields: ctx, id
func (_m *ITicketRepository) GetTicket(ctx context.Context, id int) (models.Ticket, error) {
	ret := _m.Called(ctx, id)

	var r0 models.Ticket
	if rf, ok := ret.Get(0).(func(context.Context, int) models.Ticket); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(models.Ticket)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsDuplicate provides a mock function with given fields: ctx, name
func (_m *ITicketRepository) IsDuplicate(ctx context.Context, name string) bool {
	ret := _m.Called(ctx, name)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SaveSoldTicket provides a mock function with given fields: ctx, soldTicket
func (_m *ITicketRepository) SaveSoldTicket(ctx context.Context, soldTicket models.SoldTicket) error {
	ret := _m.Called(ctx, soldTicket)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SoldTicket) error); ok {
		r0 = rf(ctx, soldTicket)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SellTicket provides a mock function with given fields: ctx, quantity, ID
func (_m *ITicketRepository) SellTicket(ctx context.Context, quantity int, ID int) error {
	ret := _m.Called(ctx, quantity, ID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) error); ok {
		r0 = rf(ctx, quantity, ID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewITicketRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewITicketRepository creates a new instance of ITicketRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewITicketRepository(t mockConstructorTestingTNewITicketRepository) *ITicketRepository {
	mock := &ITicketRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
